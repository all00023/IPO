/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import core.Producto;
import core.Ticket;
import core.Ticket_Producto;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Component;
import java.awt.Robot;
import java.awt.Toolkit;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 * @author JOSE
 */
public class PPal extends javax.swing.JFrame {

    private ArrayList<Producto> listaStock = new ArrayList<>();
//    private ArrayList<Ticket_Producto> listaVender = new ArrayList<>();
    private ArrayList<String> preciosUnitarios = new ArrayList<>();

    /**
     * Creates new form PPal
     */
    public PPal() throws AWTException {

        setExtendedState(JFrame.MAXIMIZED_BOTH);
        centrarVentana();

        initComponents();

//        setIconImage(Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("/Iconos.100px/vender002.png")));

        PanelVender.setVisible(false);
        PanelStock.setVisible(false);

    }

    private void centrarVentana() {
        Toolkit tk = Toolkit.getDefaultToolkit();
        int x = (int) tk.getScreenSize().getWidth();
        int y = (int) tk.getScreenSize().getHeight();
        setLocation((x) / 2, ((y) / 2));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Bar_Herramientas = new javax.swing.JToolBar();
        cmd_vender = new javax.swing.JButton();
        cmd_Stock = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        Panel_Capas = new javax.swing.JLayeredPane();
        PanelVender = new javax.swing.JPanel();
        txt_insertar = new javax.swing.JTextField();
        cmd_insertar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla_Vender = new javax.swing.JTable();
        cmd_eliminar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        cmd_7 = new javax.swing.JButton();
        cmd_8 = new javax.swing.JButton();
        cmd_4 = new javax.swing.JButton();
        cmd_6 = new javax.swing.JButton();
        cmd_9 = new javax.swing.JButton();
        cmd_1 = new javax.swing.JButton();
        cmd_5 = new javax.swing.JButton();
        cmd_2 = new javax.swing.JButton();
        cmd_3 = new javax.swing.JButton();
        cmd_0 = new javax.swing.JButton();
        cmd_mas = new javax.swing.JButton();
        cmd_menos = new javax.swing.JButton();
        cmd_punto = new javax.swing.JButton();
        cmd_CE = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lb_total = new javax.swing.JLabel();
        cmd_finalizar = new javax.swing.JButton();
        cmd_eliminarTodo = new javax.swing.JButton();
        PanelStock = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabla_Stock = new javax.swing.JTable();
        cmd_Todo = new javax.swing.JButton();
        cmd_Bajo = new javax.swing.JButton();
        txt_Busqueda = new javax.swing.JTextField();
        cmd_Buscar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        cmd_Aplicar = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        PanelArticulos = new javax.swing.JPanel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Ppal"); // NOI18N
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });

        Bar_Herramientas.setFloatable(false);

        cmd_vender.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmd_vender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/100px/vender02.png"))); // NOI18N
        cmd_vender.setText("Vender");
        cmd_vender.setToolTipText("");
        cmd_vender.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cmd_vender.setFocusable(false);
        cmd_vender.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmd_vender.setMaximumSize(new java.awt.Dimension(100, 100));
        cmd_vender.setMinimumSize(new java.awt.Dimension(100, 100));
        cmd_vender.setPreferredSize(new java.awt.Dimension(100, 100));
        cmd_vender.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmd_vender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_venderActionPerformed(evt);
            }
        });
        Bar_Herramientas.add(cmd_vender);

        cmd_Stock.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmd_Stock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/100px/stock.png"))); // NOI18N
        cmd_Stock.setText("Control Stock");
        cmd_Stock.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cmd_Stock.setFocusable(false);
        cmd_Stock.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmd_Stock.setMaximumSize(new java.awt.Dimension(100, 100));
        cmd_Stock.setMinimumSize(new java.awt.Dimension(100, 100));
        cmd_Stock.setPreferredSize(new java.awt.Dimension(100, 100));
        cmd_Stock.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmd_Stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_StockActionPerformed(evt);
            }
        });
        Bar_Herramientas.add(cmd_Stock);

        jButton2.setText("jButton2");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setMaximumSize(new java.awt.Dimension(100, 100));
        jButton2.setMinimumSize(new java.awt.Dimension(100, 100));
        jButton2.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Bar_Herramientas.add(jButton2);

        jButton3.setText("jButton3");
        jButton3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setMaximumSize(new java.awt.Dimension(100, 100));
        jButton3.setMinimumSize(new java.awt.Dimension(100, 100));
        jButton3.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Bar_Herramientas.add(jButton3);

        Panel_Capas.setBackground(new java.awt.Color(51, 255, 0));
        Panel_Capas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        PanelVender.setBackground(new java.awt.Color(204, 204, 204));

        txt_insertar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_insertar.setForeground(new java.awt.Color(102, 102, 102));
        txt_insertar.setText("Inserte codigo de Barras");
        txt_insertar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_insertarFocusGained(evt);
            }
        });
        txt_insertar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_insertarKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_insertarKeyPressed(evt);
            }
        });

        cmd_insertar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_insertar.setText("Inserta Art√≠culo");
        cmd_insertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_insertarActionPerformed(evt);
            }
        });

        Tabla_Vender.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod_Barras", "Articulo", "unidades", "precio x1", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabla_Vender.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                Tabla_VenderFocusLost(evt);
            }
        });
        Tabla_Vender.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Tabla_VenderKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(Tabla_Vender);

        cmd_eliminar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_eliminar.setText("Eliminar Art√≠culo");
        cmd_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_eliminarActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        cmd_7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_7.setText("7");
        cmd_7.setFocusable(false);
        cmd_7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_7ActionPerformed(evt);
            }
        });

        cmd_8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_8.setText("8");
        cmd_8.setFocusable(false);
        cmd_8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_8ActionPerformed(evt);
            }
        });

        cmd_4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_4.setText("4");
        cmd_4.setFocusable(false);
        cmd_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_4ActionPerformed(evt);
            }
        });

        cmd_6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_6.setText("6");
        cmd_6.setFocusable(false);
        cmd_6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_6ActionPerformed(evt);
            }
        });

        cmd_9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_9.setText("9");
        cmd_9.setFocusable(false);
        cmd_9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_9ActionPerformed(evt);
            }
        });

        cmd_1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_1.setText("1");
        cmd_1.setFocusable(false);
        cmd_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_1ActionPerformed(evt);
            }
        });

        cmd_5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_5.setText("5");
        cmd_5.setFocusable(false);
        cmd_5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_5ActionPerformed(evt);
            }
        });

        cmd_2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_2.setText("2");
        cmd_2.setFocusable(false);
        cmd_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_2ActionPerformed(evt);
            }
        });

        cmd_3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_3.setText("3");
        cmd_3.setFocusable(false);
        cmd_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_3ActionPerformed(evt);
            }
        });

        cmd_0.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_0.setText("0");
        cmd_0.setFocusable(false);
        cmd_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_0ActionPerformed(evt);
            }
        });

        cmd_mas.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_mas.setText("+");
        cmd_mas.setFocusable(false);
        cmd_mas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_masActionPerformed(evt);
            }
        });

        cmd_menos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_menos.setText("-");
        cmd_menos.setFocusable(false);
        cmd_menos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_menosActionPerformed(evt);
            }
        });

        cmd_punto.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_punto.setText(".");
        cmd_punto.setFocusable(false);
        cmd_punto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_puntoActionPerformed(evt);
            }
        });

        cmd_CE.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_CE.setText("CE");
        cmd_CE.setFocusable(false);
        cmd_CE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_CEActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(cmd_7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmd_8, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmd_9, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmd_4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmd_1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(cmd_5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmd_6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(cmd_2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmd_3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cmd_0, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmd_punto, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmd_CE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmd_mas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmd_menos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmd_9, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmd_CE, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmd_8, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmd_7, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmd_6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmd_4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmd_5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmd_3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmd_1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmd_2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(cmd_mas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmd_0, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmd_punto, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmd_menos, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("TOTAL");

        lb_total.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        cmd_finalizar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cmd_finalizar.setText("Finalizar Compra");
        cmd_finalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_finalizarActionPerformed(evt);
            }
        });

        cmd_eliminarTodo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_eliminarTodo.setText("Borrar Compra");
        cmd_eliminarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_eliminarTodoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelVenderLayout = new javax.swing.GroupLayout(PanelVender);
        PanelVender.setLayout(PanelVenderLayout);
        PanelVenderLayout.setHorizontalGroup(
            PanelVenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelVenderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelVenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelVenderLayout.createSequentialGroup()
                        .addComponent(txt_insertar, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmd_insertar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmd_eliminar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(PanelVenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PanelVenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cmd_finalizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(PanelVenderLayout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18)
                            .addComponent(lb_total, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(cmd_eliminarTodo))
                .addGap(31, 31, 31))
        );
        PanelVenderLayout.setVerticalGroup(
            PanelVenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelVenderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelVenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_insertar)
                    .addComponent(cmd_eliminarTodo, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(cmd_eliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmd_insertar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelVenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(PanelVenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lb_total, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(cmd_finalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(195, Short.MAX_VALUE))
        );

        PanelVender.setBounds(0, 0, 990, 630);
        Panel_Capas.add(PanelVender, javax.swing.JLayeredPane.DEFAULT_LAYER);

        PanelStock.setBackground(new java.awt.Color(204, 204, 204));

        Tabla_Stock.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "C√≥digo de Barras", "Nombre", "Stock M√≠nimo", "Stock Actual"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabla_Stock.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                Tabla_StockFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(Tabla_Stock);

        cmd_Todo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_Todo.setText("Mostrar Todo");
        cmd_Todo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_TodoActionPerformed(evt);
            }
        });

        cmd_Bajo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_Bajo.setText("Mostrar Stock Bajo");
        cmd_Bajo.setMaximumSize(new java.awt.Dimension(123, 35));
        cmd_Bajo.setMinimumSize(new java.awt.Dimension(123, 35));
        cmd_Bajo.setPreferredSize(new java.awt.Dimension(123, 35));
        cmd_Bajo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_BajoActionPerformed(evt);
            }
        });

        txt_Busqueda.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_Busqueda.setForeground(new java.awt.Color(153, 153, 153));
        txt_Busqueda.setText("B√∫squeda");
        txt_Busqueda.setPreferredSize(new java.awt.Dimension(75, 35));
        txt_Busqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_BusquedaActionPerformed(evt);
            }
        });
        txt_Busqueda.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_BusquedaFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_BusquedaFocusGained(evt);
            }
        });
        txt_Busqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_BusquedaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_BusquedaKeyTyped(evt);
            }
        });

        cmd_Buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/16px/search.png"))); // NOI18N
        cmd_Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_BuscarActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        cmd_Aplicar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmd_Aplicar.setText("Aplicar Cambios");
        cmd_Aplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_AplicarActionPerformed(evt);
            }
        });

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout PanelStockLayout = new javax.swing.GroupLayout(PanelStock);
        PanelStock.setLayout(PanelStockLayout);
        PanelStockLayout.setHorizontalGroup(
            PanelStockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelStockLayout.createSequentialGroup()
                .addGroup(PanelStockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PanelStockLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(PanelStockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmd_Bajo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmd_Todo, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 316, Short.MAX_VALUE)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmd_Aplicar, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelStockLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(PanelStockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelStockLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(txt_Busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmd_Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(34, 34, 34))
        );
        PanelStockLayout.setVerticalGroup(
            PanelStockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelStockLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(PanelStockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmd_Buscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_Busqueda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addGroup(PanelStockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelStockLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(PanelStockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PanelStockLayout.createSequentialGroup()
                                .addComponent(cmd_Todo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmd_Bajo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(PanelStockLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(cmd_Aplicar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        PanelStock.setBounds(0, 0, 770, 450);
        Panel_Capas.add(PanelStock, javax.swing.JLayeredPane.DEFAULT_LAYER);

        PanelArticulos.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout PanelArticulosLayout = new javax.swing.GroupLayout(PanelArticulos);
        PanelArticulos.setLayout(PanelArticulosLayout);
        PanelArticulosLayout.setHorizontalGroup(
            PanelArticulosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 990, Short.MAX_VALUE)
        );
        PanelArticulosLayout.setVerticalGroup(
            PanelArticulosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 630, Short.MAX_VALUE)
        );

        PanelArticulos.setBounds(0, 0, 990, 630);
        Panel_Capas.add(PanelArticulos, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Bar_Herramientas, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
            .addComponent(Panel_Capas, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(Bar_Herramientas, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Panel_Capas, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmd_venderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_venderActionPerformed
        deshabilitarcapas(PanelVender);
    }//GEN-LAST:event_cmd_venderActionPerformed

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
    }//GEN-LAST:event_formWindowStateChanged

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange
    }//GEN-LAST:event_formPropertyChange

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        int width = Panel_Capas.getWidth();
        int height = Panel_Capas.getHeight();

        PanelVender.setSize(width, height);
        PanelStock.setSize(width, height);

        // Tenemos que redimensionar todos los paneles aqui:
    }//GEN-LAST:event_formComponentResized

    private void cmd_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_0ActionPerformed

        //Conseguimos el componente de la capa que tiene el foco
        Component foco = getFocusOwner();

        //Si es un campo de texto insertamos el car√°cter al final
        if (getFocusOwner().getClass() == JTextField.class) {

            ((JTextField) foco).setText(((JTextField) foco).getText() + "0");

            //Si es una tabla tenemos que distinguir entre numeros enteros y reales
        } else if (getFocusOwner().getClass() == JTable.class) {

            int col = ((JTable) foco).getSelectedColumn();
            int fila = ((JTable) foco).getSelectedRow();
            DefaultTableModel modelo = (DefaultTableModel) ((JTable) foco).getModel();

            if (col >= 0 && col < modelo.getColumnCount() && fila >= 0 && fila < modelo.getRowCount()) {

                //Solo actualizamos si la celda es editable
                if (((JTable) foco).isCellEditable(fila, col)) {


                    if (modelo.getValueAt(fila, col).getClass() == Float.class) {

                        String aux = preciosUnitarios.get(fila);
                        aux = aux + "0";

                        Float valor = Float.valueOf(aux);
                        modelo.setValueAt(valor, fila, col);
                        preciosUnitarios.set(fila, aux);

                    } else if (modelo.getValueAt(fila, col).getClass() == Integer.class) {

                        Integer valor = (Integer) modelo.getValueAt(fila, col);
                        valor = valor * 10;

                        modelo.setValueAt(valor, fila, col);

                    }
                }
            }

        }

        actualizarPrecios();

    }//GEN-LAST:event_cmd_0ActionPerformed

    private void cmd_6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_6ActionPerformed

        //Conseguimos el componente de la capa que tiene el foco
        Component foco = getFocusOwner();

        //Si es un campo de texto insertamos el car√°cter al final
        if (getFocusOwner().getClass() == JTextField.class) {

            ((JTextField) foco).setText(((JTextField) foco).getText() + "6");

            //Si es una tabla tenemos que distinguir entre numeros enteros y reales
        } else if (getFocusOwner().getClass() == JTable.class) {

            int col = ((JTable) foco).getSelectedColumn();
            int fila = ((JTable) foco).getSelectedRow();
            DefaultTableModel modelo = (DefaultTableModel) ((JTable) foco).getModel();

            if (col >= 0 && col < modelo.getColumnCount() && fila >= 0 && fila < modelo.getRowCount()) {

                //Solo actualizamos si la celda es editable
                if (((JTable) foco).isCellEditable(fila, col)) {


                    if (modelo.getValueAt(fila, col).getClass() == Float.class) {

                        String aux = preciosUnitarios.get(fila);
                        aux = aux + "6";

                        Float valor = Float.valueOf(aux);
                        modelo.setValueAt(valor, fila, col);
                        preciosUnitarios.set(fila, aux);

                    } else if (modelo.getValueAt(fila, col).getClass() == Integer.class) {

                        Integer valor = (Integer) modelo.getValueAt(fila, col);
                        valor = valor * 10 + 6;

                        modelo.setValueAt(valor, fila, col);

                    }
                }
            }

        }

        actualizarPrecios();

    }//GEN-LAST:event_cmd_6ActionPerformed

    private void cmd_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_eliminarActionPerformed

        //para eliminar un articulo usaremos el metodo de actualizar precios, que borrara la fila al estar puesta a 0
        int fila = Tabla_Vender.getSelectedRow();
        DefaultTableModel modelo = (DefaultTableModel) Tabla_Vender.getModel();

        if (fila >= 0 && fila < Tabla_Vender.getRowCount()) {

            modelo.setValueAt(0, fila, 2);

        }

        actualizarPrecios();

    }//GEN-LAST:event_cmd_eliminarActionPerformed

    private void cmd_insertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_insertarActionPerformed

        if (!txt_insertar.getText().equals("") || txt_insertar.getText().equals("Inserte C√≥digo de Barras")) {

            try {

                Producto p = new Producto(Integer.parseInt(txt_insertar.getText()));
                if (p.getCod_barras() > 0) {
                    insertarLineaVenta(p);
                }

                cmd_insertar.requestFocusInWindow();
                txt_insertar.requestFocusInWindow();

            } catch (SQLException ex) {
                Logger.getLogger(PPal.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_cmd_insertarActionPerformed

    private void cmd_StockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_StockActionPerformed

        int width = Panel_Capas.getWidth();
        int height = Panel_Capas.getHeight();
        PanelStock.setSize(width, height);
        deshabilitarcapas(PanelStock);
        PanelStock.setVisible(true);
        Panel_Capas.moveToFront(PanelStock);
    }//GEN-LAST:event_cmd_StockActionPerformed

    private void cmd_puntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_puntoActionPerformed

        //Conseguimos el componente de la capa que tiene el foco
        Component foco = getFocusOwner();

        //solo actuamos si estamos en la tabla y en una celda de la columna del precio unitario
        if (getFocusOwner().getClass() == JTable.class) {

            int col = ((JTable) foco).getSelectedColumn();
            int fila = ((JTable) foco).getSelectedRow();
            DefaultTableModel modelo = (DefaultTableModel) ((JTable) foco).getModel();

            if (col >= 0 && col < modelo.getColumnCount() && fila >= 0 && fila < modelo.getRowCount()) {


                if (col == 3) {

                    String aux = preciosUnitarios.get(fila);
                    //solo puede haber un separador de decimales
                    if (!aux.contains(".")) {
                        aux = aux + ".";
                        preciosUnitarios.set(fila, aux);
                    }

                }
            }

        }

    }//GEN-LAST:event_cmd_puntoActionPerformed

    private void cmd_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_1ActionPerformed

        //Conseguimos el componente de la capa que tiene el foco
        Component foco = getFocusOwner();

        //Si es un campo de texto insertamos el car√°cter al final
        if (getFocusOwner().getClass() == JTextField.class) {

            ((JTextField) foco).setText(((JTextField) foco).getText() + "1");

            //Si es una tabla tenemos que distinguir entre numeros enteros y reales
        } else if (getFocusOwner().getClass() == JTable.class) {

            int col = ((JTable) foco).getSelectedColumn();
            int fila = ((JTable) foco).getSelectedRow();

            DefaultTableModel modelo = (DefaultTableModel) ((JTable) foco).getModel();

            if (col >= 0 && col < modelo.getColumnCount() && fila >= 0 && fila < modelo.getRowCount()) {

                //Solo actualizamos si la celda es editable
                if (((JTable) foco).isCellEditable(fila, col)) {


                    if (modelo.getValueAt(fila, col) == null) {
                    } else if (modelo.getValueAt(fila, col).getClass() == Float.class) {

                        String aux = preciosUnitarios.get(fila);
                        aux = aux + "1";

                        Float valor = Float.valueOf(aux);
                        modelo.setValueAt(valor, fila, col);
                        preciosUnitarios.set(fila, aux);

                    } else if (modelo.getValueAt(fila, col).getClass() == Integer.class) {

                        Integer valor = (Integer) modelo.getValueAt(fila, col);
                        valor = valor * 10 + 1;

                        modelo.setValueAt(valor, fila, col);

                    }
                }
            }

        }

        actualizarPrecios();

    }//GEN-LAST:event_cmd_1ActionPerformed

    private void cmd_menosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_menosActionPerformed

        //Conseguimos el componente de la capa que tiene el foco
        Component foco = getFocusOwner();

        //solo actuamos si estamos en la tabla y en una celda de la columna unidades
        if (getFocusOwner().getClass() == JTable.class) {

            int fila = ((JTable) foco).getSelectedRow();
            DefaultTableModel modelo = (DefaultTableModel) ((JTable) foco).getModel();

            if (fila >= 0 && fila < modelo.getRowCount()) {

                Integer valor = (Integer) modelo.getValueAt(fila, 2);
                modelo.setValueAt(valor - 1, fila, 2);

            }

        }

        actualizarPrecios();

    }//GEN-LAST:event_cmd_menosActionPerformed

    private void txt_insertarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_insertarFocusGained
        txt_insertar.setText("");
        txt_insertar.setForeground(Color.BLACK);
    }//GEN-LAST:event_txt_insertarFocusGained

    private void txt_insertarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_insertarKeyTyped
    }//GEN-LAST:event_txt_insertarKeyTyped

    private void cmd_AplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_AplicarActionPerformed

        int filas = Tabla_Stock.getRowCount();
        if (filas > 0) {

            ArrayList<Integer> mod = new ArrayList<>();
            Producto p, paux = new Producto();

            for (int i = 0; i < filas; i++) {
                paux.setCod_barras((int) Tabla_Stock.getValueAt(i, 0));
                p = listaStock.get(listaStock.indexOf(paux));

                if (p.getStock_minimo() != (int) Tabla_Stock.getValueAt(i, 2) || p.getStock() != (int) Tabla_Stock.getValueAt(i, 3)) {

                    p.setStock_minimo((int) Tabla_Stock.getValueAt(i, 2));
                    p.setStock((int) Tabla_Stock.getValueAt(i, 3));
                    p.modificar_cambios();

                }

            }

        }
    }//GEN-LAST:event_cmd_AplicarActionPerformed

    private void cmd_BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_BuscarActionPerformed

        if (!txt_Busqueda.getText().equals("") || txt_Busqueda.getText().equals("B√∫squeda")) {

            DefaultTableModel temp = (DefaultTableModel) Tabla_Stock.getModel();
            Object[] fila = new Object[4];
            int filas = Tabla_Stock.getRowCount();

            for (int i = 0; i < filas; i++) {

                temp.removeRow(0);

            }

            listaStock.clear();

            try {
                listaStock = Producto.busquedaStock(txt_Busqueda.getText());
            } catch (SQLException ex) {
                Logger.getLogger(EstadoStock.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (int i = 0; i < listaStock.size(); i++) {
                fila[0] = listaStock.get(i).getCod_barras();
                fila[1] = listaStock.get(i).getNombre();
                fila[2] = listaStock.get(i).getStock_minimo();
                fila[3] = listaStock.get(i).getStock();

                temp.addRow(fila);
            }

            // TODO add your handling code here:
        }
    }//GEN-LAST:event_cmd_BuscarActionPerformed

    private void txt_BusquedaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_BusquedaKeyTyped
    }//GEN-LAST:event_txt_BusquedaKeyTyped

    private void txt_BusquedaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_BusquedaKeyPressed

        if (evt.getKeyCode() == evt.VK_ENTER) {

            cmd_Buscar.doClick();

        }
    }//GEN-LAST:event_txt_BusquedaKeyPressed

    private void txt_BusquedaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_BusquedaFocusLost
    }//GEN-LAST:event_txt_BusquedaFocusLost

    private void txt_BusquedaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_BusquedaFocusGained

        if ("B√∫squeda".equals(txt_Busqueda.getText())) {
            txt_Busqueda.setText("");
            txt_Busqueda.setForeground(Color.black);
        }
    }//GEN-LAST:event_txt_BusquedaFocusGained

    private void txt_BusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_BusquedaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_BusquedaActionPerformed

    private void cmd_BajoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_BajoActionPerformed

        DefaultTableModel temp = (DefaultTableModel) Tabla_Stock.getModel();
        Object[] fila = new Object[4];
        int filas = Tabla_Stock.getRowCount();

        for (int i = 0; i < filas; i++) {

            temp.removeRow(0);

        }

        listaStock.clear();

        try {
            listaStock = Producto.consultarStock();
        } catch (SQLException ex) {
            Logger.getLogger(EstadoStock.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = 0; i < listaStock.size(); i++) {
            fila[0] = listaStock.get(i).getCod_barras();
            fila[1] = listaStock.get(i).getNombre();
            fila[2] = listaStock.get(i).getStock_minimo();
            fila[3] = listaStock.get(i).getStock();

            temp.addRow(fila);
        }

    }//GEN-LAST:event_cmd_BajoActionPerformed

    private void cmd_TodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_TodoActionPerformed
        Toolkit.getDefaultToolkit().beep();
        DefaultTableModel temp = (DefaultTableModel) Tabla_Stock.getModel();
        Object[] fila = new Object[4];
        int filas = Tabla_Stock.getRowCount();

        for (int i = 0; i < filas; i++) {

            temp.removeRow(0);

        }

        listaStock.clear();

        try {
            listaStock = Producto.consultarTodoStock();
        } catch (SQLException ex) {
            Logger.getLogger(EstadoStock.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = 0; i < listaStock.size(); i++) {
            fila[0] = listaStock.get(i).getCod_barras();
            fila[1] = listaStock.get(i).getNombre();
            fila[2] = listaStock.get(i).getStock_minimo();
            fila[3] = listaStock.get(i).getStock();

            temp.addRow(fila);
        }

    }//GEN-LAST:event_cmd_TodoActionPerformed

    private void Tabla_StockFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tabla_StockFocusLost
        Tabla_Stock.editCellAt(-1, -1);
    }//GEN-LAST:event_Tabla_StockFocusLost

    private void cmd_masActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_masActionPerformed

        //Conseguimos el componente de la capa que tiene el foco
        Component foco = getFocusOwner();

        //solo actuamos si estamos en la tabla y en una celda de la columna unidades
        if (getFocusOwner().getClass() == JTable.class) {

            int fila = ((JTable) foco).getSelectedRow();
            DefaultTableModel modelo = (DefaultTableModel) ((JTable) foco).getModel();

            if (fila >= 0 && fila < modelo.getRowCount()) {

                Integer valor = (Integer) modelo.getValueAt(fila, 2);
                modelo.setValueAt(valor + 1, fila, 2);

            }

        }

        actualizarPrecios();

    }//GEN-LAST:event_cmd_masActionPerformed

    private void txt_insertarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_insertarKeyPressed

        if (evt.getKeyCode() == evt.VK_ENTER) {

            cmd_insertar.doClick();

        }
    }//GEN-LAST:event_txt_insertarKeyPressed

    private void cmd_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_2ActionPerformed

        //Conseguimos el componente de la capa que tiene el foco
        Component foco = getFocusOwner();

        //Si es un campo de texto insertamos el car√°cter al final
        if (getFocusOwner().getClass() == JTextField.class) {

            ((JTextField) foco).setText(((JTextField) foco).getText() + "2");

            //Si es una tabla tenemos que distinguir entre numeros enteros y reales
        } else if (getFocusOwner().getClass() == JTable.class) {

            int col = ((JTable) foco).getSelectedColumn();
            int fila = ((JTable) foco).getSelectedRow();
            DefaultTableModel modelo = (DefaultTableModel) ((JTable) foco).getModel();

            if (col >= 0 && col < modelo.getColumnCount() && fila >= 0 && fila < modelo.getRowCount()) {

                //Solo actualizamos si la celda es editable
                if (((JTable) foco).isCellEditable(fila, col)) {


                    if (modelo.getValueAt(fila, col).getClass() == Float.class) {

                        String aux = preciosUnitarios.get(fila);
                        aux = aux + "2";

                        Float valor = Float.valueOf(aux);
                        modelo.setValueAt(valor, fila, col);
                        preciosUnitarios.set(fila, aux);

                    } else if (modelo.getValueAt(fila, col).getClass() == Integer.class) {

                        Integer valor = (Integer) modelo.getValueAt(fila, col);
                        valor = valor * 10 + 2;

                        modelo.setValueAt(valor, fila, col);

                    }
                }
            }

        }

        actualizarPrecios();

    }//GEN-LAST:event_cmd_2ActionPerformed

    private void cmd_3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_3ActionPerformed

        //Conseguimos el componente de la capa que tiene el foco
        Component foco = getFocusOwner();

        //Si es un campo de texto insertamos el car√°cter al final
        if (getFocusOwner().getClass() == JTextField.class) {

            ((JTextField) foco).setText(((JTextField) foco).getText() + "3");

            //Si es una tabla tenemos que distinguir entre numeros enteros y reales
        } else if (getFocusOwner().getClass() == JTable.class) {

            int col = ((JTable) foco).getSelectedColumn();
            int fila = ((JTable) foco).getSelectedRow();

            DefaultTableModel modelo = (DefaultTableModel) ((JTable) foco).getModel();

            if (col >= 0 && col < modelo.getColumnCount() && fila >= 0 && fila < modelo.getRowCount()) {

                //Solo actualizamos si la celda es editable
                if (((JTable) foco).isCellEditable(fila, col)) {


                    if (modelo.getValueAt(fila, col).getClass() == Float.class) {

                        String aux = preciosUnitarios.get(fila);
                        aux = aux + "3";

                        Float valor = Float.valueOf(aux);
                        modelo.setValueAt(valor, fila, col);
                        preciosUnitarios.set(fila, aux);

                    } else if (modelo.getValueAt(fila, col).getClass() == Integer.class) {

                        Integer valor = (Integer) modelo.getValueAt(fila, col);
                        valor = valor * 10 + 3;

                        modelo.setValueAt(valor, fila, col);

                    }
                }
            }

        }

        actualizarPrecios();

    }//GEN-LAST:event_cmd_3ActionPerformed

    private void cmd_4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_4ActionPerformed

        //Conseguimos el componente de la capa que tiene el foco
        Component foco = getFocusOwner();

        //Si es un campo de texto insertamos el car√°cter al final
        if (getFocusOwner().getClass() == JTextField.class) {

            ((JTextField) foco).setText(((JTextField) foco).getText() + "4");

            //Si es una tabla tenemos que distinguir entre numeros enteros y reales
        } else if (getFocusOwner().getClass() == JTable.class) {

            int col = ((JTable) foco).getSelectedColumn();
            int fila = ((JTable) foco).getSelectedRow();
            DefaultTableModel modelo = (DefaultTableModel) ((JTable) foco).getModel();

            if (col >= 0 && col < modelo.getColumnCount() && fila >= 0 && fila < modelo.getRowCount()) {

                //Solo actualizamos si la celda es editable
                if (((JTable) foco).isCellEditable(fila, col)) {


                    if (modelo.getValueAt(fila, col).getClass() == Float.class) {

                        String aux = preciosUnitarios.get(fila);
                        aux = aux + "4";

                        Float valor = Float.valueOf(aux);
                        modelo.setValueAt(valor, fila, col);
                        preciosUnitarios.set(fila, aux);

                    } else if (modelo.getValueAt(fila, col).getClass() == Integer.class) {

                        Integer valor = (Integer) modelo.getValueAt(fila, col);
                        valor = valor * 10 + 4;

                        modelo.setValueAt(valor, fila, col);

                    }
                }
            }

        }

        actualizarPrecios();

    }//GEN-LAST:event_cmd_4ActionPerformed

    private void cmd_5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_5ActionPerformed

        //Conseguimos el componente de la capa que tiene el foco
        Component foco = getFocusOwner();

        //Si es un campo de texto insertamos el car√°cter al final
        if (getFocusOwner().getClass() == JTextField.class) {

            ((JTextField) foco).setText(((JTextField) foco).getText() + "5");

            //Si es una tabla tenemos que distinguir entre numeros enteros y reales
        } else if (getFocusOwner().getClass() == JTable.class) {

            int col = ((JTable) foco).getSelectedColumn();
            int fila = ((JTable) foco).getSelectedRow();
            DefaultTableModel modelo = (DefaultTableModel) ((JTable) foco).getModel();

            if (col >= 0 && col < modelo.getColumnCount() && fila >= 0 && fila < modelo.getRowCount()) {

                //Solo actualizamos si la celda es editable
                if (((JTable) foco).isCellEditable(fila, col)) {


                    if (modelo.getValueAt(fila, col).getClass() == Float.class) {

                        String aux = preciosUnitarios.get(fila);
                        aux = aux + "5";

                        Float valor = Float.valueOf(aux);
                        modelo.setValueAt(valor, fila, col);
                        preciosUnitarios.set(fila, aux);

                    } else if (modelo.getValueAt(fila, col).getClass() == Integer.class) {

                        Integer valor = (Integer) modelo.getValueAt(fila, col);
                        valor = valor * 10 + 5;

                        modelo.setValueAt(valor, fila, col);

                    }
                }
            }

        }

        actualizarPrecios();

    }//GEN-LAST:event_cmd_5ActionPerformed

    private void cmd_7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_7ActionPerformed

        //Conseguimos el componente de la capa que tiene el foco
        Component foco = getFocusOwner();

        //Si es un campo de texto insertamos el car√°cter al final
        if (getFocusOwner().getClass() == JTextField.class) {

            ((JTextField) foco).setText(((JTextField) foco).getText() + "7");

            //Si es una tabla tenemos que distinguir entre numeros enteros y reales
        } else if (getFocusOwner().getClass() == JTable.class) {

            int col = ((JTable) foco).getSelectedColumn();
            int fila = ((JTable) foco).getSelectedRow();
            DefaultTableModel modelo = (DefaultTableModel) ((JTable) foco).getModel();

            if (col >= 0 && col < modelo.getColumnCount() && fila >= 0 && fila < modelo.getRowCount()) {

                //Solo actualizamos si la celda es editable
                if (((JTable) foco).isCellEditable(fila, col)) {


                    if (modelo.getValueAt(fila, col).getClass() == Float.class) {

                        String aux = preciosUnitarios.get(fila);
                        aux = aux + "7";

                        Float valor = Float.valueOf(aux);
                        modelo.setValueAt(valor, fila, col);
                        preciosUnitarios.set(fila, aux);

                    } else if (modelo.getValueAt(fila, col).getClass() == Integer.class) {

                        Integer valor = (Integer) modelo.getValueAt(fila, col);
                        valor = valor * 10 + 7;

                        modelo.setValueAt(valor, fila, col);

                    }
                }
            }

        }

        actualizarPrecios();

    }//GEN-LAST:event_cmd_7ActionPerformed

    private void cmd_8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_8ActionPerformed

        //Conseguimos el componente de la capa que tiene el foco
        Component foco = getFocusOwner();

        //Si es un campo de texto insertamos el car√°cter al final
        if (getFocusOwner().getClass() == JTextField.class) {

            ((JTextField) foco).setText(((JTextField) foco).getText() + "8");

            //Si es una tabla tenemos que distinguir entre numeros enteros y reales
        } else if (getFocusOwner().getClass() == JTable.class) {

            int col = ((JTable) foco).getSelectedColumn();
            int fila = ((JTable) foco).getSelectedRow();
            DefaultTableModel modelo = (DefaultTableModel) ((JTable) foco).getModel();

            if (col >= 0 && col < modelo.getColumnCount() && fila >= 0 && fila < modelo.getRowCount()) {

                //Solo actualizamos si la celda es editable
                if (((JTable) foco).isCellEditable(fila, col)) {


                    if (modelo.getValueAt(fila, col).getClass() == Float.class) {

                        String aux = preciosUnitarios.get(fila);
                        aux = aux + "8";

                        Float valor = Float.valueOf(aux);
                        modelo.setValueAt(valor, fila, col);
                        preciosUnitarios.set(fila, aux);

                    } else if (modelo.getValueAt(fila, col).getClass() == Integer.class) {

                        Integer valor = (Integer) modelo.getValueAt(fila, col);
                        valor = valor * 10 + 8;

                        modelo.setValueAt(valor, fila, col);

                    }
                }
            }

        }

        actualizarPrecios();

    }//GEN-LAST:event_cmd_8ActionPerformed

    private void cmd_9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_9ActionPerformed

        //Conseguimos el componente de la capa que tiene el foco
        Component foco = getFocusOwner();

        //Si es un campo de texto insertamos el car√°cter al final
        if (getFocusOwner().getClass() == JTextField.class) {

            ((JTextField) foco).setText(((JTextField) foco).getText() + "9");

            //Si es una tabla tenemos que distinguir entre numeros enteros y reales
        } else if (getFocusOwner().getClass() == JTable.class) {

            int col = ((JTable) foco).getSelectedColumn();
            int fila = ((JTable) foco).getSelectedRow();
            DefaultTableModel modelo = (DefaultTableModel) ((JTable) foco).getModel();

            if (col >= 0 && col < modelo.getColumnCount() && fila >= 0 && fila < modelo.getRowCount()) {

                //Solo actualizamos si la celda es editable
                if (((JTable) foco).isCellEditable(fila, col)) {


                    if (modelo.getValueAt(fila, col).getClass() == Float.class) {

                        String aux = preciosUnitarios.get(fila);
                        aux = aux + "9";

                        Float valor = Float.valueOf(aux);
                        modelo.setValueAt(valor, fila, col);
                        preciosUnitarios.set(fila, aux);

                    } else if (modelo.getValueAt(fila, col).getClass() == Integer.class) {

                        Integer valor = (Integer) modelo.getValueAt(fila, col);
                        valor = valor * 10 + 9;

                        modelo.setValueAt(valor, fila, col);

                    }
                }
            }

        }

        actualizarPrecios();

    }//GEN-LAST:event_cmd_9ActionPerformed

    private void Tabla_VenderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tabla_VenderFocusLost

        //Actualizamos tambien la lista de precios en formato texto

        DefaultTableModel temp = (DefaultTableModel) Tabla_Vender.getModel();
        int n = temp.getRowCount();

        for (int i = 0; i < n; i++) {

            preciosUnitarios.set(i, eliminarCerosALaDerecha(String.valueOf(temp.getValueAt(i, 3))));

        }

        actualizarPrecios();
    }//GEN-LAST:event_Tabla_VenderFocusLost

    private void Tabla_VenderKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Tabla_VenderKeyTyped
    }//GEN-LAST:event_Tabla_VenderKeyTyped

    private void cmd_CEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_CEActionPerformed

        //Conseguimos el componente de la capa que tiene el foco
        Component foco = getFocusOwner();

        //Si es un campo de texto borramos el car√°cter final
        if (getFocusOwner().getClass() == JTextField.class) {

            String text = ((JTextField) foco).getText();
            if (text.length() > 0) {
                ((JTextField) foco).setText(text.substring(0, text.length() - 1));
            }

            //Si es una tabla tenemos que distinguir entre numeros enteros y reales
        } else if (getFocusOwner().getClass() == JTable.class) {

            int col = ((JTable) foco).getSelectedColumn();
            int fila = ((JTable) foco).getSelectedRow();
            DefaultTableModel modelo = (DefaultTableModel) ((JTable) foco).getModel();

            if (col >= 0 && col < modelo.getColumnCount() && fila >= 0 && fila < modelo.getRowCount()) {

                //Solo actualizamos si la celda es editable
                if (((JTable) foco).isCellEditable(fila, col)) {


                    if (modelo.getValueAt(fila, col).getClass() == Float.class) {

                        String aux = preciosUnitarios.get(fila);

                        if (aux.length() == 1) {
                            Float valor = (float) 0.0;
                            modelo.setValueAt(valor, fila, col);
                            preciosUnitarios.set(fila, "0");
                        } else {
                            aux = aux.substring(0, aux.length() - 1);

                            Float valor = Float.valueOf(aux);
                            modelo.setValueAt(valor, fila, col);
                            preciosUnitarios.set(fila, aux);
                        }

                    } else if (modelo.getValueAt(fila, col).getClass() == Integer.class) {

                        Integer valor = (Integer) modelo.getValueAt(fila, col);
                        valor = valor / 10;

                        modelo.setValueAt(valor, fila, col);

                    }
                }
            }

        }

        actualizarPrecios();

    }//GEN-LAST:event_cmd_CEActionPerformed

    private void cmd_finalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_finalizarActionPerformed

        ArrayList<Ticket_Producto> lista = new ArrayList<>();
        DefaultTableModel modelo = (DefaultTableModel) Tabla_Vender.getModel();

        for (int i = 0; i < modelo.getRowCount(); i++) {

            lista.add(new Ticket_Producto(0, ((Integer) modelo.getValueAt(i, 0)), ((Integer) modelo.getValueAt(i, 2)), ((Float) modelo.getValueAt(i, 3))));

        }
        try {
            Ticket compra = new Ticket(lista);
            compra.insertar();
            compra.imprimir_ticket();

            int n = modelo.getRowCount();

            for (int i = 0; i < n; i++) {

                modelo.removeRow(0);

            }

            actualizarPrecios();

            Panel.aviso("Ticket Creado con Exito", compra.toString());

        } catch (SQLException ex) {
            Panel.error("Error SQL", "Compruebe que ningun programa este usando la bas de datos");
        } catch (IOException ex) {
            Panel.error("Error Fichero", "Compruebe que la carpeta tickets es accesible");
        }

    }//GEN-LAST:event_cmd_finalizarActionPerformed

    private void cmd_eliminarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_eliminarTodoActionPerformed

        //Solo se borra cuando hay algun articulo y si lo confirma el usuario
        if (Tabla_Vender.getRowCount() > 0) {

            int respuesta = Panel.confirmacion_si_no("Confirmacion", "¬øDesea eliminar la compra actual?");

            if (respuesta == 0) {

                DefaultTableModel modelo = (DefaultTableModel) Tabla_Vender.getModel();
                int n = modelo.getRowCount();

                for (int i = 0; i < n; i++) {

                    modelo.removeRow(0);

                }

                actualizarPrecios();
            }
        }
    }//GEN-LAST:event_cmd_eliminarTodoActionPerformed

    private void insertarLineaVenta(Producto p) {

        DefaultTableModel temp = (DefaultTableModel) Tabla_Vender.getModel();



        Object[] fila = new Object[5];
        boolean existe = false;
        int n = temp.getRowCount();

        int i = 0;
        while (!existe && i < n) {

            if ((Integer) temp.getValueAt(i, 0) == p.getCod_barras()) {
                existe = true;
            } else {
                i++;
            }
        }


        if (!existe) {

            fila[0] = p.getCod_barras();
            fila[1] = p.getNombre();
            fila[2] = 1;
            fila[3] = p.getPrecio();
            fila[4] = p.getPrecio();

            preciosUnitarios.add(eliminarCerosALaDerecha(String.valueOf(p.getPrecio())));

            temp.addRow(fila);


        } else {

            int aux;
            aux = (Integer) temp.getValueAt(i, 2);
            temp.setValueAt(aux + 1, i, 2);

        }

        calcularPrecio();

    }

    private void deshabilitarcapas(JPanel vis) {

        PanelVender.setVisible(false);
        PanelStock.setVisible(false);
        PanelVender.setEnabled(false);
        PanelStock.setEnabled(false);

        int width = Panel_Capas.getWidth();
        int height = Panel_Capas.getHeight();
        vis.setSize(width, height);
        vis.setLocation(0, 0);

        vis.setVisible(true);
        vis.setEnabled(true);
        Panel_Capas.moveToFront(vis);
    }

    private void actualizarPrecios() {

        DefaultTableModel temp = (DefaultTableModel) Tabla_Vender.getModel();
        int n = temp.getRowCount();
        Integer cant;
        Float precio;
        ArrayList<Integer> filasVacias = new ArrayList<>();

        for (int i = 0; i < n; i++) {

            cant = (Integer) temp.getValueAt(i, 2);

            //Guardamos las lineas vacias para borrarlas despues y no alterar el orden
            if (cant != null) {//Una celda vacia devuelve null

                if (cant == 0) {
                    filasVacias.add(i);
                } else {

                    if (temp.getValueAt(i, 3) != null) {

                        //Si la celda no tiene decimales se detecta como entero y tenemos que controlarlo
                        if (temp.getValueAt(i, 3).getClass() == Integer.class) {
                            precio = Float.valueOf(String.valueOf((Integer) temp.getValueAt(i, 3)));
                        } else {
                            precio = (Float) temp.getValueAt(i, 3);
                        }
                    } else {//Una celda vacia devuelve null

                        precio = (float) 0;
                        temp.setValueAt(0, i, 3);

                    }

                    temp.setValueAt(cant * precio, i, 4);

                }
            } else {
                filasVacias.add(i);
            }
        }

        //Si borramos mas de un elemento alteramos el indice d elos siguientes por lo que por seguridad lo hacremos en orden inverso
        for (int i = filasVacias.size() - 1; i >= 0; i--) {

            temp.removeRow(filasVacias.get(i));
            preciosUnitarios.remove(filasVacias.get(i));

        }

        //Llamamos a la funci√≥n que actualiza el precio total
        calcularPrecio();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PPal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PPal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PPal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PPal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PPal().setVisible(true);
                } catch (AWTException ex) {
                    Logger.getLogger(PPal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private Float calcularPrecio() {

        float total = 0;
        DefaultTableModel temp = (DefaultTableModel) Tabla_Vender.getModel();
        int n = temp.getRowCount();

        for (int i = 0; i < n; i++) {

            total += (float) temp.getValueAt(i, 4);

        }

        String aux = String.valueOf(total);

        int indice = aux.indexOf(".");

        if (indice > 0 && indice < aux.length() - 3) {
            aux = aux.substring(0, indice + 3);
        }

        lb_total.setText("" + aux + " ‚Ç¨");

        return total;
    }

    private String eliminarCerosALaDerecha(String ant) {

        if (ant.contains(".")) {

            while (ant.charAt(ant.length() - 1) == '0') {
                //eliminamos los ceros finales
                ant = ant.substring(0, ant.length() - 1);

            }

            if (ant.charAt(ant.length() - 1) == '.') {
                //si hay no hay decimales eliminamos tambien la coma
                ant = ant.substring(0, ant.length() - 1);
            }

        }

        return ant;

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar Bar_Herramientas;
    private javax.swing.JPanel PanelArticulos;
    private javax.swing.JPanel PanelStock;
    private javax.swing.JPanel PanelVender;
    private javax.swing.JLayeredPane Panel_Capas;
    private javax.swing.JTable Tabla_Stock;
    private javax.swing.JTable Tabla_Vender;
    private javax.swing.JButton cmd_0;
    private javax.swing.JButton cmd_1;
    private javax.swing.JButton cmd_2;
    private javax.swing.JButton cmd_3;
    private javax.swing.JButton cmd_4;
    private javax.swing.JButton cmd_5;
    private javax.swing.JButton cmd_6;
    private javax.swing.JButton cmd_7;
    private javax.swing.JButton cmd_8;
    private javax.swing.JButton cmd_9;
    private javax.swing.JButton cmd_Aplicar;
    private javax.swing.JButton cmd_Bajo;
    private javax.swing.JButton cmd_Buscar;
    private javax.swing.JButton cmd_CE;
    private javax.swing.JButton cmd_Stock;
    private javax.swing.JButton cmd_Todo;
    private javax.swing.JButton cmd_eliminar;
    private javax.swing.JButton cmd_eliminarTodo;
    private javax.swing.JButton cmd_finalizar;
    private javax.swing.JButton cmd_insertar;
    private javax.swing.JButton cmd_mas;
    private javax.swing.JButton cmd_menos;
    private javax.swing.JButton cmd_punto;
    private javax.swing.JButton cmd_vender;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel lb_total;
    private javax.swing.JTextField txt_Busqueda;
    private javax.swing.JTextField txt_insertar;
    // End of variables declaration//GEN-END:variables
}
